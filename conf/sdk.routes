# Routes
# This file defines all application sdk.routes (Higher priority sdk.routes first)
# ~~~~

# An example controller showing a sample home page
#GET         /                                 controllers.InspectionController.index

#Testing support

#SDK Support
GET         /                                                                           @sdk.controllers.ApplicationController.describeEndpoints
POST        /auth/login                                                                 sdk.controllers.AuthenticationController.login
POST        /auth/logout                                                                sdk.controllers.AuthenticationController.logout
GET         /auth/validateToken                                                         sdk.controllers.AuthenticationController.validateToken

#For backwards compatability
GET         /user/userInfoKeys                                                          sdk.controllers.UserController.getUserInfoKeys

GET         /user/describe                                                              sdk.controllers.UserController.getConfiguration
GET         /user/:userID                                                               sdk.controllers.UserController.getUserInfo(userID)
POST        /user                                                                       sdk.controllers.UserController.createUser
PUT         /user                                                                       sdk.controllers.UserController.updateUser()
#GET           /user/:userID/image                                                         sdk.controllers.UserController.getUserImage(userID)
#POST          /user/checkForUserInfo                                                      sdk.controllers.UserController.checkForUserInfo
#POST          /user/createUserEvent                                                       sdk.controllers.UserController.createUser
#PUT           /user/updateUserEvent                                                       sdk.controllers.UserController.updateUser()
#DELETE        /user/deleteUserEvent                                                       sdk.controllers.UserController.deleteUser()


GET         /dataset/:dataSetName                                                       sdk.controllers.DataSetController.getDataSet(dataSetName: String)
GET         /dataset/:dataSetName/describe                                              sdk.controllers.DataSetController.getDataConfiguration(dataSetName: String)
GET         /dataset/:dataSetName/:primaryKey                                           sdk.controllers.DataSetController.getDataSetItem(dataSetName : String, primaryKey : String)
POST        /dataset/:dataSetName                                                       sdk.controllers.DataSetController.createDataSetItem(dataSetName : String)
PUT         /dataset/:dataSetName                                                       sdk.controllers.DataSetController.updateDataSetItem(dataSetName : String)
PUT         /dataset/:dataSetName/bulk                                                  sdk.controllers.DataSetController.bulkUpdate(dataSetName : String)
POST        /dataset/:dataSetName/search                                                sdk.controllers.DataSetController.searchDataSet(dataSetName : String)
POST        /dataset/:dataSetName/:dataSetID/event                                      sdk.controllers.DataSetController.postEvent(dataSetName, dataSetID)


GET         /datacollection/:endpoint/describe                                          sdk.controllers.DataCollectionController.getDataCollectionConfiguration(endpoint)
GET         /datacollection/:endpoint/:sessionID/data                                   sdk.controllers.DataCollectionController.getDataSet(endpoint, sessionID)
POST        /datacollection/:endpoint/start                                             sdk.controllers.DataCollectionController.startDataCollection(endpoint)
GET         /datacollection/:endpoint/:sessionID/cancel                                 sdk.controllers.DataCollectionController.cancelDataCollection(endpoint, sessionID)
GET         /datacollection/:endpoint/:sessionID/end                                    sdk.controllers.DataCollectionController.completeDataCollection(endpoint, sessionID)
GET         /datacollection/:endpoint/:sessionID/save                                   sdk.controllers.DataCollectionController.saveDataCollection(endpoint, sessionID)
GET         /datacollection/:endpoint/:sessionID/:dataSetID/searchForDataSetItem        sdk.controllers.DataCollectionController.searchForExternalItem(endpoint, sessionID, dataSetID)
POST        /datacollection/:endpoint/:sessionID/event                                  sdk.controllers.DataCollectionController.postEvent(endpoint, sessionID)
POST        /datacollection/:endpoint/:sessionID/submit                                 sdk.controllers.DataCollectionController.submit(endpoint, sessionID)

GET         /inspection/:endpoint/inspect/describe                                      sdk.controllers.InspectionController.getInspectionConfiguration(endpoint)
GET         /inspection/:endpoint/search/describe                                       sdk.controllers.InspectionController.getInspectionSearchConfiguration(endpoint)

POST        /inspection/:endpoint/search                                                sdk.controllers.InspectionController.startInspection(endpoint)
PUT         /inspection/:endpoint/inspect                                               sdk.controllers.InspectionController.updateInspectionItem(endpoint)
PUT         /inspection/:endpoint/inspect/complete                                      sdk.controllers.InspectionController.completeInspection(endpoint)

GET         /attachments/:attachmentID                                                  sdk.controllers.DataSetController.getAttachment(attachmentID : String)

GET         /list/:listName/describe                                                    sdk.controllers.ListController.getListConfiguration(listName: String)
POST        /list/:listName/search                                                      sdk.controllers.ListController.searchListData(listName: String)
GET         /list/:listName                                                             sdk.controllers.ListController.getListData(listName: String)

GET         /tester/*file                                                               sdk.controllers.StaticFileController.tester(file)
GET         /validate                                                                   sdk.controllers.StaticFileController.isRunningPage